"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable react/no-unescaped-entities */
const react_1 = __importDefault(require("react"));
const react_bootstrap_1 = require("react-bootstrap");
const Tutorial = ({ modalState, setModalState }) => (react_1.default.createElement(react_1.default.Fragment, null,
    react_1.default.createElement(react_bootstrap_1.Modal, { show: modalState === "modal-one", centered: true, onHide: () => setModalState("close"), keyboard: false, backdrop: "static", size: "lg", animation: false },
        react_1.default.createElement(react_bootstrap_1.Modal.Header, { closeButton: true },
            react_1.default.createElement(react_bootstrap_1.Modal.Title, null, "Welcome to Pathfinding Visualiser!")),
        react_1.default.createElement(react_bootstrap_1.Modal.Body, { className: "body" },
            "A pathfinding algorithm seeks to find the shortest path between two points, just like Google Maps or any other mapp app would do.",
            react_1.default.createElement("div", { className: "tute-img" },
                react_1.default.createElement("img", { src: require("./images/path-icon.png"), alt: "path-icon-gif" }))),
        react_1.default.createElement(react_bootstrap_1.Modal.Footer, null,
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "danger close", onClick: () => setModalState("close") }, "Close Tutorial"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "secondary" }, "Previous"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "primary", onClick: () => setModalState("modal-two") }, "Next (1/8)"))),
    react_1.default.createElement(react_bootstrap_1.Modal, { show: modalState === "modal-two", centered: true, onHide: () => setModalState("close"), keyboard: false, backdrop: "static", size: "lg", animation: false },
        react_1.default.createElement(react_bootstrap_1.Modal.Header, { closeButton: true },
            react_1.default.createElement(react_bootstrap_1.Modal.Title, null, "Pick any algorithm you like")),
        react_1.default.createElement(react_bootstrap_1.Modal.Body, { className: "body" },
            "You can use the algorithm picker to try different algorithms. Note that some algorithms are unweighted, while others are weighted. Unweighted algorithms take weight nodes into consideration, whereas weighted ones do. When u pick an algorithm, press the green button to visualise it and see it come to life!",
            react_1.default.createElement("div", { className: "tute-img" },
                react_1.default.createElement("img", { src: require("./images/algos.gif"), alt: "algo-gif" }))),
        react_1.default.createElement(react_bootstrap_1.Modal.Footer, null,
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "danger close", onClick: () => setModalState("close") }, "Close Tutorial"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "secondary", onClick: () => setModalState("modal-one") }, "Previous"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "primary", onClick: () => setModalState("modal-three") }, "Next (2/8)"))),
    react_1.default.createElement(react_bootstrap_1.Modal, { show: modalState === "modal-three", centered: true, onHide: () => setModalState("close"), keyboard: false, backdrop: "static", size: "lg", animation: false },
        react_1.default.createElement(react_bootstrap_1.Modal.Header, { closeButton: true },
            react_1.default.createElement(react_bootstrap_1.Modal.Title, null, "Meet the algorithms")),
        react_1.default.createElement(react_bootstrap_1.Modal.Body, { className: "body" },
            react_1.default.createElement("ul", null,
                react_1.default.createElement("li", null,
                    " ",
                    react_1.default.createElement("b", null, "Dijkstra's Algorithm"),
                    " (weighted): the father of pathfinding algorithms; guarantees the shortest path"),
                react_1.default.createElement("br", null),
                react_1.default.createElement("li", null,
                    react_1.default.createElement("b", null, "A* Search"),
                    " (weighted): arguably the best pathfinding algorithm; uses heuristics to guarantee the shortest path much faster than Dijkstra's Algorithm"),
                react_1.default.createElement("br", null),
                react_1.default.createElement("li", null,
                    react_1.default.createElement("b", null, "Greedy Best-first Search"),
                    " (unweighted): a faster, more heuristic-heavy version of A*; does not guarantee the shortest path"),
                react_1.default.createElement("br", null),
                react_1.default.createElement("li", null,
                    react_1.default.createElement("b", null, "Bidirectional Greedy Search"),
                    " (unweighted): Greedy-Search from both sides; guarentees the shortest path"),
                react_1.default.createElement("br", null),
                react_1.default.createElement("li", null,
                    " ",
                    react_1.default.createElement("b", null, "Breath-first Search"),
                    " (unweighted): a great algorithm; guarantees the shortest path"),
                react_1.default.createElement("br", null),
                react_1.default.createElement("li", null,
                    " ",
                    react_1.default.createElement("b", null, "Depth-first Search"),
                    " (unweighted): a very bad algorithm for pathfinding; does not guarantee the shortest path"))),
        react_1.default.createElement(react_bootstrap_1.Modal.Footer, null,
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "danger close", onClick: () => setModalState("close") }, "Close Tutorial"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "secondary", onClick: () => setModalState("modal-two") }, "Previous"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "primary", onClick: () => setModalState("modal-four") }, "Next (3/8)"))),
    react_1.default.createElement(react_bootstrap_1.Modal, { show: modalState === "modal-four", centered: true, onHide: () => setModalState("close"), keyboard: false, backdrop: "static", size: "lg", animation: false },
        react_1.default.createElement(react_bootstrap_1.Modal.Header, { closeButton: true },
            react_1.default.createElement(react_bootstrap_1.Modal.Title, null, "Add Walls")),
        react_1.default.createElement(react_bootstrap_1.Modal.Body, { className: "body" },
            "Click on the grid to add a wall or click and move the cursor in order to place many walls at the same time. Walls are impenetrable, meaning that a path cannot cross through them. Click on a wall again in order to remove it. You can also generate mazes and patterns from the \"Mazes\" drop-down menu.",
            react_1.default.createElement("div", { className: "tute-img" },
                react_1.default.createElement("img", { src: require("./images/wall-demonstration.gif"), alt: "algo-gif" }))),
        react_1.default.createElement(react_bootstrap_1.Modal.Footer, null,
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "danger close", onClick: () => setModalState("close") }, "Close Tutorial"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "secondary", onClick: () => setModalState("modal-three") }, "Previous"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "primary", onClick: () => setModalState("modal-five") }, "Next (4/8)"))),
    react_1.default.createElement(react_bootstrap_1.Modal, { show: modalState === "modal-five", centered: true, onHide: () => setModalState("close"), keyboard: false, backdrop: "static", size: "lg", animation: false },
        react_1.default.createElement(react_bootstrap_1.Modal.Header, { closeButton: true },
            react_1.default.createElement(react_bootstrap_1.Modal.Title, null, "Add Weights")),
        react_1.default.createElement(react_bootstrap_1.Modal.Body, { className: "body" },
            "Right click on the grid to add a weight or right-click and move the cursor in order to place many weights at the same time. Unlike with walls, weights arent impassable. They are simply more \"costly\" to move through. In this application, moving through a weight node has a \"cost\" of 15.",
            react_1.default.createElement("div", { className: "tute-img" },
                react_1.default.createElement("img", { src: require("./images/weight-demonstration.gif"), alt: "algo-gif" }))),
        react_1.default.createElement(react_bootstrap_1.Modal.Footer, null,
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "danger close", onClick: () => setModalState("close") }, "Close Tutorial"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "secondary", onClick: () => setModalState("modal-four") }, "Previous"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "primary", onClick: () => setModalState("modal-six") }, "Next (5/8)"))),
    react_1.default.createElement(react_bootstrap_1.Modal, { show: modalState === "modal-six", centered: true, onHide: () => setModalState("close"), keyboard: false, backdrop: "static", size: "lg", animation: false },
        react_1.default.createElement(react_bootstrap_1.Modal.Header, { closeButton: true },
            react_1.default.createElement(react_bootstrap_1.Modal.Title, null, "Add Target")),
        react_1.default.createElement(react_bootstrap_1.Modal.Body, { className: "body" },
            "Right click on the grid to add a wall or right-click and move the cursor in order to place many weights at the same time. Unlike with walls, weights arent impassable. They are simply more \"costly\" to move through. In this application, moving through a weight node has a \"cost\" of 15.",
            react_1.default.createElement("div", { className: "button-img" },
                react_1.default.createElement("img", { src: require("./images/target-button.png"), alt: "algo-gif" }))),
        react_1.default.createElement(react_bootstrap_1.Modal.Footer, null,
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "danger close", onClick: () => setModalState("close") }, "Close Tutorial"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "secondary", onClick: () => setModalState("modal-five") }, "Previous"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "primary", onClick: () => setModalState("modal-seven") }, "Next (6/8)"))),
    react_1.default.createElement(react_bootstrap_1.Modal, { show: modalState === "modal-seven", centered: true, onHide: () => setModalState("close"), keyboard: false, backdrop: "static", size: "lg", animation: false },
        react_1.default.createElement(react_bootstrap_1.Modal.Header, { closeButton: true },
            react_1.default.createElement(react_bootstrap_1.Modal.Title, null, "Dragging Nodes")),
        react_1.default.createElement(react_bootstrap_1.Modal.Body, { className: "body" },
            "Click and drag the start, bomb, and target nodes to move them. Note that you can drag nodes even after an algorithm has finished running. This will allow you to instantly see different paths.",
            react_1.default.createElement("div", { className: "tute-img" },
                react_1.default.createElement("img", { src: require("./images/dragging-node-demonstration.gif"), alt: "algo-gif" }))),
        react_1.default.createElement(react_bootstrap_1.Modal.Footer, null,
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "danger close", onClick: () => setModalState("close") }, "Close Tutorial"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "secondary", onClick: () => setModalState("modal-six") }, "Previous"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "primary", onClick: () => setModalState("modal-eight") }, "Next (7/8)"))),
    react_1.default.createElement(react_bootstrap_1.Modal, { show: modalState === "modal-eight", centered: true, onHide: () => setModalState("close"), keyboard: false, backdrop: "static", size: "lg", animation: false },
        react_1.default.createElement(react_bootstrap_1.Modal.Header, { closeButton: true },
            react_1.default.createElement(react_bootstrap_1.Modal.Title, null, "Visualizing and more")),
        react_1.default.createElement(react_bootstrap_1.Modal.Body, { className: "body" },
            "Use the navbar buttons to visualize algorithms and to do other stuff! You can clear the current path, clear walls and weights, clear the entire board, and adjust the visualization speed, all from the navbar. If you want to access this tutorial again, click on the \"Tutorial\" button on the right end of the navbar",
            react_1.default.createElement("div", { className: "navbar-demo" },
                react_1.default.createElement("img", { src: require("./images/navbar-demo.gif"), alt: "algo-gif" }))),
        react_1.default.createElement(react_bootstrap_1.Modal.Footer, null,
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "danger close", onClick: () => setModalState("close") }, "Close Tutorial"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "secondary", onClick: () => setModalState("modal-seven") }, "Previous"),
            react_1.default.createElement(react_bootstrap_1.Button, { variant: "primary", onClick: () => setModalState("closed") }, "Finish (8/8)")))));
exports.default = Tutorial;
